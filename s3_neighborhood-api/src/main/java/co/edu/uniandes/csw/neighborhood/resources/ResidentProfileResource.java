/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.uniandes.csw.neighborhood.resources;

import co.edu.uniandes.csw.neighborhood.dtos.ResidentProfileDTO;
import co.edu.uniandes.csw.neighborhood.dtos.ResidentProfileDetailDTO;
import co.edu.uniandes.csw.neighborhood.ejb.ResidentProfileLogic;
import co.edu.uniandes.csw.neighborhood.entities.ResidentProfileEntity;
import co.edu.uniandes.csw.neighborhood.exceptions.BusinessLogicException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import static javax.ws.rs.HttpMethod.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.PathParam;
import javax.ws.rs.WebApplicationException;

/**
 * Class implementing resource "residents".
 *
 * @author albayons
 * @version 1.0
 */
@Path("/residents")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@RequestScoped
public class ResidentProfileResource {

    private static final Logger LOGGER = Logger.getLogger(ResidentProfileResource.class.getName());

    @Inject
    private ResidentProfileLogic residentLogic;

    /**
     * Creates a new resident with the information received in request, then 
     * an identical object is returned with an id generated by DB 
     *
     * @param resident {@link ResidentProfileDTO} - Resident to be persisted
     * @return JSON {@link ResidentProfileDTO} - Auto-generated resident to be persisted
     */
    @POST
    public ResidentProfileDTO createResident(ResidentProfileDTO resident) throws BusinessLogicException {
        LOGGER.log(Level.INFO, "Creating resident resource: input: {0}", resident);
        ResidentProfileDTO residentDTO = new ResidentProfileDTO(residentLogic.createResident(resident.toEntity()));
        LOGGER.log(Level.INFO, "AuthorResource createAuthor: output: {0}", residentDTO);
        return residentDTO;
    }

    /**
     * Looks for all residents on application and returns them.
     *
     * @return JSONArray {@link ResidentProfileDetailDTO} - All the residents on application if found. Otherwise, an empty list.
     */
    @GET
    public List<ResidentProfileDetailDTO> getResidents() {
        LOGGER.info("Looking for all residents from resources: input: void");
        List<ResidentProfileDetailDTO> listaAuthors = listEntity2DTO(residentLogic.getResidents());
        LOGGER.log(Level.INFO, "Ended looking for all residents from resources: output: {0}", listaAuthors);
        return listaAuthors;
    }

    /**
     * Looks for the resident with id received in the URL y returns it.
     *
     * @param residentsId Id from wanted resident. Must be a sequence of digits.
     * @return JSON {@link ResidentProfileDetailDTO} - Wanted resident DTO
     * @throws WebApplicationException {@link WebApplicationExceptionMapper} -
     * Logic error if not found
     */
    @GET
    @Path("{residentsId: \\d+}")
    public ResidentProfileDetailDTO getResident(@PathParam("residentsId") Long residentsId) {
        LOGGER.log(Level.INFO, "Looking for  resident from resource: input: {0}", residentsId);
        ResidentProfileEntity residentEntity = residentLogic.getResident(residentsId);
        if (residentEntity == null) {
            throw new WebApplicationException("El recurso /authors/" + residentsId + " no existe.", 404);
        }
        ResidentProfileDetailDTO detailDTO = new ResidentProfileDetailDTO(residentEntity);
        LOGGER.log(Level.INFO, "Ended looking for resident from resource: output: {0}", detailDTO);
        return detailDTO;
    }
    
    

    /**
     * Updates resident with id from URL with the information contained in request body.
     *
     * @param residentId ID from resident to be updated. Must be a sequence of digits.
     * @param resident {@link ResidentProfileDetailDTO} Resident to be updated.
     * @return JSON {@link ResidentProfileDetailDTO} - Updated resident
     * @throws WebApplicationException {@link WebApplicationExceptionMapper} -
     * Logic error if not found
     */
    @PUT
    @Path("{residentsId: \\d+}")
    public ResidentProfileDetailDTO updateResident(@PathParam("residentsId") Long residentId, ResidentProfileDetailDTO resident) {
        LOGGER.log(Level.INFO, "Updating resident from resource: input: authorsId: {0} , author: {1}", new Object[]{residentId, resident});
        resident.setId(residentId);
        if (residentLogic.getResident(residentId) == null) {
            throw new WebApplicationException("Resource /residents/" + residentId + " does not exist.", 404);
        }
        ResidentProfileDetailDTO detailDTO = new ResidentProfileDetailDTO( resident.toEntity());
        LOGGER.log(Level.INFO, "Ended updating for resident from resource: output: {0}", detailDTO);
        return detailDTO;
    }

    /**
     * Deletes the resident with the associated id received in URL
     *
     * @param residentsId id from resident to be deleted
     * @throws WebApplicationException {@link WebApplicationExceptionMapper}
     * Error de lógica que se genera cuando no se encuentra el autor a borrar.
     */
    @DELETE
    @Path("{residentsId: \\d+}")
    public void deleteResident(@PathParam("authorsId") Long residentsId)  {
        LOGGER.log(Level.INFO, "Deleting resident from resource: input: {0}", residentsId);
        if (residentLogic.getResident(residentsId) == null) {
            throw new WebApplicationException("El recurso /authors/" + residentsId + " no existe.", 404);
        }
        residentLogic.deleteResident(residentsId);
        LOGGER.info("Resident deleted from resource: output: void");
    }

//    /**
//     * Conexión con el servicio de libros para un autor.
//     * {@link AuthorBooksResource}
//     *
//     * Este método conecta la ruta de /authors con las rutas de /books que
//     * dependen del autor, es una redirección al servicio que maneja el segmento
//     * de la URL que se encarga de los libros.
//     *
//     * @param authorsId El ID del autor con respecto al cual se accede al
//     * servicio.
//     * @return El servicio de Libros para ese autor en paricular.
//     */
//    @Path("{authorsId: \\d+}/books")
//    public Class<AuthorBooksResource> getAuthorBooksResource(@PathParam("authorsId") Long authorsId) {
//        if (residentLogic.getAuthor(authorsId) == null) {
//            throw new WebApplicationException("El recurso /authors/" + authorsId + " no existe.", 404);
//        }
//        return AuthorBooksResource.class;
//    }

    /**
     * Converts an entity list to a DTO list for residents.
     *
     * @param entityList Resident entity list to be converted.
     * @return Resident DTO list 
     */
    private List<ResidentProfileDetailDTO> listEntity2DTO(List<ResidentProfileEntity> entityList) {
        List<ResidentProfileDetailDTO> list = new ArrayList<>();
        for (ResidentProfileEntity entity : entityList) {
            list.add(new ResidentProfileDetailDTO(entity));
        }
        return list;
    }
}