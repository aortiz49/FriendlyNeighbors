/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.uniandes.csw.neighborhood.resources;

import co.edu.uniandes.csw.neighborhood.dtos.GroupDTO;
import co.edu.uniandes.csw.neighborhood.dtos.GroupDetailDTO;
import co.edu.uniandes.csw.neighborhood.ejb.GroupLogic;
import co.edu.uniandes.csw.neighborhood.entities.GroupEntity;
import co.edu.uniandes.csw.neighborhood.exceptions.BusinessLogicException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.PathParam;
import javax.ws.rs.WebApplicationException;

/**
 * Class implementing resource "groups".
 *
 * @author albayona
 * @version 1.0
 */
@Path("groups")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@RequestScoped
public class GroupResource {

    private static final Logger LOGGER = Logger.getLogger(GroupResource.class.getName());

    @Inject
    private GroupLogic groupLogic;

    /**
     * Creates a new group with the information received in request, then an
     * identical object is returned with an id generated by DB
     *
     * @param group {@link GroupDTO} - Resident to be persisted
     * @return JSON {@link GroupDTO} - Auto-generated group to be persisted
     */
    @POST
    public GroupDTO createResident(GroupDTO group) throws BusinessLogicException {
        LOGGER.log(Level.INFO, "Creating group from resource: input: {0}", group);

        GroupDTO groupDTO = new GroupDTO(groupLogic.createGroup(group.toEntity()));

        LOGGER.log(Level.INFO, "Created group from resource: output: {0}", groupDTO);
        return groupDTO;
    }

    /**
     * Looks for all groups on application and returns them.
     *
     * @return JSONArray {@link GroupDetailDTO} - All the groups on application
     * if found. Otherwise, an empty list.
     */
    @GET
    public List<GroupDetailDTO> getResidents() {
        LOGGER.info("Looking for all groups from resources: input: void");
        List<GroupDetailDTO> groups = listEntity2DTO(groupLogic.getGroups());
        LOGGER.log(Level.INFO, "Ended looking for all groups from resources: output: {0}", groups);
        return groups;
    }

    /**
     * Looks for the group with id received in the URL y returns it.
     *
     * @param groupsId Id from wanted group. Must be a sequence of digits.
     * @return JSON {@link GroupDetailDTO} - Wanted group DTO
     * @throws WebApplicationException {@link WebApplicationExceptionMapper} -
     * Logic error if not found
     */
    @GET
    @Path("{groupsId: \\d+}")
    public GroupDetailDTO getResident(@PathParam("groupsId") Long groupsId) {
        LOGGER.log(Level.INFO, "Looking for  group from resource: input: {0}", groupsId);
        GroupEntity groupEntity = groupLogic.getGroup(groupsId);
        if (groupEntity == null) {
            throw new WebApplicationException("Resource /groups/" + groupsId + " does not exist.", 404);
        }
        GroupDetailDTO detailDTO = new GroupDetailDTO(groupEntity);
        LOGGER.log(Level.INFO, "Ended looking for group from resource: output: {0}", detailDTO);
        return detailDTO;
    }

    /**
     * Updates group with id from URL with the information contained in request
     * body.
     *
     * @param groupId ID from group to be updated. Must be a sequence of digits.
     * @param group {@link GroupDetailDTO} Resident to be updated.
     * @return JSON {@link GroupDetailDTO} - Updated group
     * @throws WebApplicationException {@link WebApplicationExceptionMapper} -
     * Logic error if not found
     */
    @PUT
    @Path("{groupsId: \\d+}")
    public GroupDetailDTO updateAuthor(@PathParam("groupsId") Long groupsId, GroupDetailDTO group) throws BusinessLogicException {
        LOGGER.log(Level.INFO, "Updating group from resource: input: authorsId: {0} , author: {1}", new Object[]{groupsId, group});
        group.setId(groupsId);
        if (groupLogic.getGroup(groupsId) == null) {
             throw new WebApplicationException("Resource /groups/" + groupsId + " does not exist.", 404);
        }
        GroupDetailDTO detailDTO = new GroupDetailDTO(groupLogic.updateGroup(group.toEntity()));
        LOGGER.log(Level.INFO, "Ended updating group from resource: output: {0}", detailDTO);

        return detailDTO;
    }

    /**
     * Deletes the group with the associated id received in URL
     *
     * @param groupsId id from group to be deleted
     * @throws WebApplicationException {@link WebApplicationExceptionMapper}
     * Logic error if not found
     */
    @DELETE
    @Path("{groupsId: \\d+}")
    public void deleteResident(@PathParam("groupsId") Long groupsId) {
        LOGGER.log(Level.INFO, "Deleting group from resource: input: {0}", groupsId);
        if (groupLogic.getGroup(groupsId) == null) {
            throw new WebApplicationException("Resource /groups/" + groupsId + " does not exist.", 404);
        }
        groupLogic.deleteGroup(groupsId);
        LOGGER.info("Resident deleted from resource: output: void");
    }

    /**
     *
     * Connects /groups route with /members route which are dependent of group
     * resource, by redirecting to the service managing the URL segment in
     * charge of the members
     *
     * @param groupId id from group from which the resource is being accessed
     * @return members resource from the specified group
     */

    @Path("{groupsId: \\d+}/members")
    public Class<GroupMemberResource> getGroupMemberResource(@PathParam("groupsId") Long groupsId) {
        if (groupLogic.getGroup(groupsId) == null) {
            throw new WebApplicationException("Resource /groups/" + groupsId + " does not exist.", 404);
        }
        return GroupMemberResource.class;
    }

    /**
     * Converts an entity list to a DTO list for groups.
     *
     * @param entityList Resident entity list to be converted.
     * @return Resident DTO list
     */
    private List<GroupDetailDTO> listEntity2DTO(List<GroupEntity> entityList) {
        List<GroupDetailDTO> list = new ArrayList<>();
        for (GroupEntity entity : entityList) {
            list.add(new GroupDetailDTO(entity));
        }
        return list;
    }
}
