{
	"info": {
		"_postman_id": "64c582a5-bde6-4cf4-bb34-c8dae54bd2f2",
		"name": "Group-Tests.postman_collection",
		"description": "# Introduction\nWhat does your API do?\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create group with nonexisting neighborhood",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2c9e845f-40eb-4e50-8a3b-2b4c2f298330",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aaf6ceef-c993-4bed-b150-d635432d9806",
						"exec": [
							"tests[\"The group must have an existing  neighborhood\"] = responseCode.code === 404;",
							"tests[\"Expected error message \"] = responseBody.has(\"Resource /neighborhoods/100 does not exist.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": \"Cra 73\",\r\n    \"email\": \"blcv@hotmail.com\",\r\n    \"name\": \"Andres Bayona\",\r\n    \"neighborhood\": {\"id\": 555},\r\n    \"nickname\": \"AB\",\r\n    \"phoneNumber\": \"1132323\",\r\n    \"preferences\": \"None\",\r\n    \"proofOfResidence\": \"link\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/100/groups",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"100",
						"groups"
					]
				},
				"description": "Get group with non-existing neighborhood in the application.\r\n\r\nThe test verifies the generation of error and message \" Resource /neighborhoods/100 does not exist\".\r\n\r\n** Expected http code: 404 **\r\n"
			},
			"response": []
		},
		{
			"name": "Create neighborhood for tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f4515fb8-152f-4e8a-8cdb-0196a0643f3b",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_N\",data.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"XX\",\n\t\"id\": \"1\"\n\t\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods"
					]
				}
						},
			"response": []
		},
		{
			"name": "Get a nonexistent group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00672231-442c-41bf-908d-960c5416facb",
						"exec": [
							"tests[\"A nonexisting group should not be found\"] = responseCode.code === 404;",
							"tests[\"Expected error message \"] = responseBody.has(\"Resource /groups/22 does not exist.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups/22",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups",
						"22"
					]
				},
				"description": "Gets group that does not exist in the application.\r\n\r\nThe test verifies the generation of error and message \"The resource / groups / 22 does not exist.\".\r\n\r\n** Expected http code: 404 **\r\n"
			},
			"response": []
		},
		{
			"name": "Create group1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2c9e845f-40eb-4e50-8a3b-2b4c2f298330",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aaf6ceef-c993-4bed-b150-d635432d9806",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_a1\",data.id);",
							"tests[\"Free of errors on Post\"] = responseCode.code === 200;",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": \"Cra 73\",\r\n    \"email\": \"blcd@hotmail.com\",\r\n    \"name\": \"Andres Bayona\",\r\n    \"neighborhood\": {\"id\": \"{{new_id_N}}\"},\r\n    \"nickname\": \"AB\",\r\n    \"phoneNumber\": \"1132323\",\r\n    \"preferences\": \"None\",\r\n    \"proofOfResidence\": \"link\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups/",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups",
						""
					]
				},
				"description": "Create a new group with the neighborhood specified as a path paramter. The Id is initialized by the BD and must be seen in the response.\r\nFor the test, the id is stored in a variable that will be used in other requests in the collection.\r\n** Expected http code: 200 **\r\n"
			},
			"response": []
		},
		{
			"name": "Create group2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2c9e845f-40eb-4e50-8a3b-2b4c2f298330",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aaf6ceef-c993-4bed-b150-d635432d9806",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_a2\",data.id);",
							"tests[\"Free of errors on Post\"] = responseCode.code === 200;",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": \"Cra 75\",\r\n    \"email\": \"cb@hotmail.com\",\r\n    \"name\": \"Carlos Bayona\",\r\n    \"neighborhood\": {\"id\": \"{{new_id_N}}\"},\r\n    \"nickname\": \"CB\",\r\n    \"phoneNumber\": \"1422323\",\r\n    \"preferences\": \"None\",\r\n    \"proofOfResidence\": \"link\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups"
					]
				},
				"description": "Create a new group with the neighborhood specified as a path paramter. The Id is initialized by the BD and must be seen in the response.\r\nFor the test, the id is stored in a variable that will be used in other requests in the collection.\r\n** Expected http code: 200 **\r\n"
			},
			"response": []
		},
		{
			"name": "Create group with duplicated email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22c22c13-4fd9-4544-b1a0-0664707ae6a7",
						"exec": [
							"tests[\"An e-mail cannot be duplicated\"] = responseCode.code === 412;",
							"tests[\"Expected error message\"] = responseBody.has(\"E-mail provided already in use\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": \"Cra 73\",\r\n    \"email\": \"blcd@hotmail.com\",\r\n    \"name\": \"Andres Bayona\",\r\n    \"neighborhood\": {\"id\": \"{{new_id_N}}\"},\r\n    \"nickname\": \"AB\",\r\n    \"phoneNumber\": \"1132323\",\r\n    \"preferences\": \"None\",\r\n    \"proofOfResidence\": \"link\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups"
					]
				},
				"description": "Tries to create a group with duplicated email in the application.\r\n\r\nThe test verifies the generation of error and message \"E-mail provided already in use\".\r\n\r\n** Expected http code: 412 **\r\n"
			},
			"response": []
		},
		{
			"name": "Create group with no email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22c22c13-4fd9-4544-b1a0-0664707ae6a7",
						"exec": [
							"tests[\"An e-mail has to be specified\"] = responseCode.code === 412;",
							"tests[\"Expected error message \"] = responseBody.has(\"An e-mail has to be specified\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": \"Cra 73\",\r\n    \"name\": \"Andres Bayona\",\r\n    \"neighborhood\": {\"id\": \"{{new_id_N}}\"},\r\n    \"nickname\": \"AB\",\r\n    \"phoneNumber\": \"1132323\",\r\n    \"preferences\": \"None\",\r\n    \"proofOfResidence\": \"link\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups"
					]
				},
				"description": "Tries to create a group with no email.\r\n\r\nThe test verifies the generation of error and message \"An e-mail has to be specified\".\r\n\r\n** Expected http code: 404 **\r\n"
			},
			"response": []
		},
		{
			"name": "Create group with no phone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22c22c13-4fd9-4544-b1a0-0664707ae6a7",
						"exec": [
							"tests[\"A phone has to be specified\"] = responseCode.code === 412;",
							"tests[\"Expected error message \"] = responseBody.has(\"A phone has to be specified\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": \"Cra 73\",\r\n    \"email\": \"blc@hotmail.com\",\r\n    \"name\": \"Andres Bayona\",\r\n    \"neighborhood\": {\"id\": \"{{new_id_N}}\"},\r\n    \"nickname\": \"AB\",\r\n    \"preferences\": \"None\",\r\n    \"proofOfResidence\": \"link\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups"
					]
				},
				"description": "Tries to create a group with no phone.\r\nThe test verifies the generation of error and message \" A phone has to be specified\".\r\n** Expected http code: 412 **\r\n"
			},
			"response": []
		},
		{
			"name": "Create group with no name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22c22c13-4fd9-4544-b1a0-0664707ae6a7",
						"exec": [
							"tests[\"A name has to be specified\"] = responseCode.code === 412;",
							"tests[\"Expected error message \"] = responseBody.has(\"A name has to be specified\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": \"Cra 73\",\r\n    \"email\": \"blc@hotmail.com\",\r\n    \"neighborhood\": {\"id\": \"{{new_id_N}}\"},\r\n    \"nickname\": \"AB\",\r\n    \"phoneNumber\": \"1132323\",\r\n    \"preferences\": \"None\",\r\n    \"proofOfResidence\": \"link\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups"
					]
				},
				"description": "Tries to create a group with no name.\r\nThe test verifies the generation of error and message \" A name has to be specified\".\r\n** Expected http code: 412 **\r\n"
			},
			"response": []
		},
		{
			"name": "Create group with no proof of residence",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22c22c13-4fd9-4544-b1a0-0664707ae6a7",
						"exec": [
							"tests[\"A proof of residence has to be specified\"] = responseCode.code === 412;",
							"tests[\"Expected error message \"] = responseBody.has(\"A proof of residence has to be specified\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": \"Cra 73\",\r\n    \"email\": \"blc@hotmail.com\",\r\n    \"name\": \"Andres Bayona\",\r\n    \"neighborhood\": {\"id\": \"{{new_id_N}}\"},\r\n    \"nickname\": \"AB\",\r\n    \"phoneNumber\": \"1132323\",\r\n    \"preferences\": \"None\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups"
					]
				},
				"description": "Tries to create a group with no proof of residence.\r\nThe test verifies the generation of error and message \" A proof of residence has to be specified\".\r\n** Expected http code: 412 **\r\n"
			},
			"response": []
		},
		{
			"name": "Get all groups",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b3b3b64d-c1a7-49dd-8e3e-72e6e52e44f4",
						"exec": [
							"tests[\"Free of errors on GET all residens\"] = responseCode.code == 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups"
					]
				},
				"description": "Consult all the groups of a neighborhood.\r\nThe petition has no body.\r\n\r\nFor the test, it is verified that the set of groups in the answer has more than one.\r\n\r\n** Expected http code: 200 **\r\n"
			},
			"response": []
		},
		{
			"name": "Get a group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00672231-442c-41bf-908d-960c5416facb",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"Free of errors on Get\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups/{{new_id_a1}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups",
						"{{new_id_a1}}"
					]
				},
				"description": "Gets group with the neighborhood specified as a path parameter. \r\nThe petition has no body.\r\nThe desired group id is sent by the request URL.\r\n** Expected http code: 200 **\r\n"
			},
			"response": []
		},
		{
			"name": "Edit a group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bad7ce88-801b-42bb-b50a-da3eb62d7308",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"Free of errors on Put\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": \"Cra 73\",\r\n    \"email\": \"blcff@hotmail.com\",\r\n    \"name\": \"Andres Leonardo Bayona\",\r\n    \"neighborhood\": {\"id\": \"{{new_id_N}}\"},\r\n    \"nickname\": \"AB\",\r\n    \"phoneNumber\": \"1132323\",\r\n    \"preferences\": \"None\",\r\n    \"proofOfResidence\": \"link\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups/{{new_id_a1}}/",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups",
						"{{new_id_a1}}",
						""
					]
				},
				"description": "Esdits group with the neighborhood specified as a path parameter. \r\nThe petition has no body.\r\nThe desired group id is sent by the request URL.\r\n** Expected http code: 200 **\r\n"
			},
			"response": []
		},
		{
			"name": "Edit a nonexisting group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bad7ce88-801b-42bb-b50a-da3eb62d7308",
						"exec": [
							"tests[\"A nonexisting group should not be edited\"] = responseCode.code === 404;",
							"tests[\"Expected error message \"] = responseBody.has(\"Resource /groups/22 does not exist.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": \"Cra 73\",\r\n    \"email\": \"blcff@hotmail.com\",\r\n    \"name\": \"Andres Leonardo Bayona\",\r\n    \"neighborhood\": {\"id\": \"{{new_id_N}}\"},\r\n    \"nickname\": \"AB\",\r\n    \"phoneNumber\": \"1132323\",\r\n    \"preferences\": \"None\",\r\n    \"proofOfResidence\": \"link\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups/22",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups",
						"22"
					]
				},
				"description": "Edits group that does not exist in the application.\r\n\r\nThe test verifies the generation of error and message \"The resource / groups / 22 does not exist.\".\r\n\r\n** Expected http code: 404 **\r\n"
			},
			"response": []
		},
		{
			"name": "Delete a group1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0d27dd2c-c6e5-47c5-b329-ca38c5433d23",
						"exec": [
							"tests[\"Free of error on Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups/{{new_id_a1}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups",
						"{{new_id_a1}}"
					]
				},
				"description": "Deletes group. The previously created group is sent.\r\n** Expected HTTP Code: 204 **\r\n"
			},
			"response": []
		},
		{
			"name": "Delete a group2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0d27dd2c-c6e5-47c5-b329-ca38c5433d23",
						"exec": [
							"tests[\"Free of error on Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups/{{new_id_a2}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups",
						"{{new_id_a2}}"
					]
				},
				"description": "Deletes group. The previously created group is sent.\r\n** Expected HTTP Code: 204 **\r\n"
			},
			"response": []
		},
		{
			"name": "Delete a nonexisting group",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bad7ce88-801b-42bb-b50a-da3eb62d7308",
						"exec": [
							"tests[\"A nonexisting group should not be deleted\"] = responseCode.code === 404;",
							"tests[\"Expected error message \"] = responseBody.has(\"Resource /groups/22 does not exist.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}/groups/22",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}",
						"groups",
						"22"
					]
				},
				"description": "Deletes group that does not exist in the application.\r\n\r\nThe test verifies the generation of error and message \"The resource / groups / 22 does not exist.\".\r\n\r\n** Expected http code: 404 **\r\n"
			},
			"response": []
		},
		{
			"name": "Delete neighborhood",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bad7ce88-801b-42bb-b50a-da3eb62d7308",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s3_neighborhood-api/api/neighborhoods/{{new_id_N}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s3_neighborhood-api",
						"api",
						"neighborhoods",
						"{{new_id_N}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}